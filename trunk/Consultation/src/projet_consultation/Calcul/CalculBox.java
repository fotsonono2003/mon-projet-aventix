package projet_consultation.Calcul;

import java.awt.Cursor;
import java.awt.Font;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Random; 
import javax.swing.ImageIcon;
import javax.swing.SwingWorker;
import org.jdesktop.application.Action;
import projet_consultation.ClassesGenerales.Operateur;
import projet_consultation.GenererRapport.Finprocessus;
import projet_consultation.GenererRapport.Rapport;
import projet_consultation.creation_dossiers.mes_documents;

public class CalculBox extends javax.swing.JDialog implements PropertyChangeListener
{ 
    private Task task;
    boolean ImprimeRapport=false;
    Operateur operateur;
    String dateDebut;
    String dateFin;
    Rapport rapport;
 
    @Override
    protected void finalize() throws Throwable
    {
        super.finalize();
    }
    
    public CalculBox(java.awt.Frame parent,Operateur operateur,String date_debut,String date_fin,boolean imprime)
    { 
        super(parent);
        initComponents();
        ImprimeRapport=imprime;
        this.operateur=operateur;
        dateDebut=date_debut;
        dateFin=date_fin;
        getRootPane().setDefaultButton(closeButton);
        closeButton.setFont(new Font("Dialog",Font.BOLD, 14));

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        this.setLocationRelativeTo(parent);
        rapport=new Rapport(operateur, date_debut, date_fin, ImprimeRapport);
        //rapport.rapport();
        rapport.execute();
        
        task = new Task();
        task.execute();
    }
    
    @Action
    public void closeAboutBox()
    {
        try
        {
            if (!rapport.isDone())
            {
                boolean b = false;
                if (!rapport.isCancelled())
                {
                    b = rapport.cancel(true);
                }
                if (!task.isDone() && b)
                {
                    task.cancel(true);
                }
                try
                {
                    Thread.sleep(2000);//on attend pendant quelques secondes pour se rassurer que le processus est vraiment fini.
                } catch (Exception ex) {
                }
                this.dispose();
            } else if (!task.isDone())
            {
                if (!rapport.isCancelled())
                {
                    rapport.cancel(true);
                }
                if (!task.isCancelled())
                {
                    task.cancel(true);
                }
                try
                {
                    Thread.sleep(2000);//on attend pendant quelques secondes pour se rassurer que le processus est vraiment fini.
                } catch (Exception ex) {
                }
                this.dispose();
            }
        }
        catch (Exception ex)
        {
            //Logger.getLogger(CalculBox.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        jLabelRegion = new javax.swing.JLabel();
        jLabelIcon = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(projet_consultation.Projet_ConsultationApp.class).getContext().getResourceMap(CalculBox.class);
        setTitle(resourceMap.getString("title")); // NOI18N
        setModal(true);
        setName("aboutBox"); // NOI18N
        setResizable(false);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(projet_consultation.Projet_ConsultationApp.class).getContext().getActionMap(CalculBox.class, this);
        closeButton.setAction(actionMap.get("closeAboutBox")); // NOI18N
        closeButton.setText(resourceMap.getString("closeButton.text")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jLabelRegion.setFont(resourceMap.getFont("jLabelRegion.font")); // NOI18N
        jLabelRegion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelRegion.setText(resourceMap.getString("jLabelRegion.text")); // NOI18N
        jLabelRegion.setName("jLabelRegion"); // NOI18N

        jLabelIcon.setText(resourceMap.getString("jLabelIcon.text")); // NOI18N
        jLabelIcon.setName("jLabelIcon"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(closeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jLabelIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabelRegion)
                .addGap(18, 18, 18)
                .addComponent(jLabelIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addComponent(closeButton)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_closeButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabelIcon;
    private javax.swing.JLabel jLabelRegion;
    // End of variables declaration//GEN-END:variables

    public void propertyChange(PropertyChangeEvent evt)
    {
        //if ("progress" == evt.getPropertyName())
        if ("progress".equalsIgnoreCase( evt.getPropertyName()))
        {
            int progress = (Integer) evt.getNewValue();
            System.out.println(String.format("Completed %d%% of task.\n", task.getProgress()));
            jLabelRegion.setText(progress+"%");
            System.out.println("valeur:"+progress);
        }
    }
    
    class Task extends SwingWorker<Void, Void>
    {        
        @Override
        public Void doInBackground()
        {
            Random random = new Random();
            //Initialize progress property.
            setProgress(0);
            org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(projet_consultation.Projet_ConsultationApp.class).getContext().getResourceMap(projet_consultation.Principale.Interface_Principale.class);
            while (!rapport.isDone())
            {
                ImageIcon im1; //= resourceMap.getImageIcon("logo_regulateur");
                for (int i = 0; i <15; i++)
                {
                    im1=new javax.swing.ImageIcon(getClass().getResource("/resources/busyicons/busy-icon"+i+".png"));
                    //im1 = resourceMap.getImageIcon("StatusBar.busyIcons["+i+"]");
                    jLabelIcon.setIcon(im1);
                    try
                    {
                        Thread.sleep(random.nextInt(50));
                    } catch (InterruptedException ex)
                    {
                    }
                }
                
                /*
                progress +=20;//random.nextInt(10);
                setProgress(Math.min(progress,100));
                 * 
                 */
            }
            //setProgress(Math.min(progress, 100));
            return null;
        }

        @Override
        public void done()
        {
            try
            {
                Toolkit.getDefaultToolkit().beep();
                setCursor(null); //turn off the wait cursor
                System.out.println("Calcul Box Done\n");
                dispose();
            }
            catch (Exception ex)
            {
            }
        }
    }

    @Action
    public void FermerBox()
    {
        if(task.isDone())
        {
            dispose();
        }
        else
        {
            task.removePropertyChangeListener(this);
            task.done();
            dispose();
        }
    }

}
