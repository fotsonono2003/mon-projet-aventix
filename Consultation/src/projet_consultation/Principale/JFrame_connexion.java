package projet_consultation.Principale;

import java.awt.Dimension;
import java.awt.Image;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane; 
import org.jdesktop.application.Action;
import projet_consultation.ConnexionBDD.Connexion_BDDGenerale;
import projet_consultation.ClassesGenerales.StringEncrypter;
import projet_consultation.Projet_ConsultationAboutBox;
import projet_consultation.Projet_ConsultationApp;

public class JFrame_connexion extends javax.swing.JFrame
{ 
    JDialog aboutBox;
    public static String email;

    @Override
    protected void finalize() throws Throwable
    {
        super.finalize();
    }

    /** Creates new form JFrame_connexion */
    public JFrame_connexion()
    {
        initComponents();
        //Dimension d=new Dimension(this.getSize().width, this.getSize().height);
        Dimension d=new Dimension(1200, 730);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(projet_consultation.Projet_ConsultationApp.class).getContext().getResourceMap(projet_consultation.Principale.JFrame_connexion.class);
        //ImageIcon image=new ImageIcon("./resources/icon_fond.jpg");
        ImageIcon image=resourceMap.getImageIcon("icon_fond.icon");
        Image im1=image.getImage();
        im1=im1.getScaledInstance(d.width,d.height-40,Image.SCALE_DEFAULT);

        jLabelFond.setIcon(new ImageIcon(im1));

        ImageIcon Iconqostracker = new javax.swing.ImageIcon(getClass().getResource("/resources/logoqostracker.png"));
        im1=Iconqostracker.getImage();
        this.setIconImage(im1);

        this.setResizable(false);
        this.setLocationRelativeTo(null);
    }

    @Action
    public void ShowAboutBox()
    {
        if(aboutBox == null)
        {
            JFrame mainFrame = Projet_ConsultationApp.getApplication().getMainFrame();
            aboutBox = new Projet_ConsultationAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        Projet_ConsultationApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldLogin = new javax.swing.JTextField();
        jPasswordFieldPassword = new javax.swing.JPasswordField();
        jButtonOK = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jLabelFond = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(null);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(projet_consultation.Projet_ConsultationApp.class).getContext().getResourceMap(JFrame_connexion.class);
        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(349, 270, 110, 33);

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        jPanel1.add(jLabel2);
        jLabel2.setBounds(350, 350, 110, 27);

        jTextFieldLogin.setFont(resourceMap.getFont("jTextFieldLogin.font")); // NOI18N
        jTextFieldLogin.setText(resourceMap.getString("jTextFieldLogin.text")); // NOI18N
        jTextFieldLogin.setName("jTextFieldLogin"); // NOI18N
        jPanel1.add(jTextFieldLogin);
        jTextFieldLogin.setBounds(460, 270, 255, 32);

        jPasswordFieldPassword.setFont(resourceMap.getFont("jPasswordFieldPassword.font")); // NOI18N
        jPasswordFieldPassword.setText(resourceMap.getString("jPasswordFieldPassword.text")); // NOI18N
        jPasswordFieldPassword.setName("jPasswordFieldPassword"); // NOI18N
        jPanel1.add(jPasswordFieldPassword);
        jPasswordFieldPassword.setBounds(460, 350, 255, 28);

        jButtonOK.setFont(resourceMap.getFont("jButtonOK.font")); // NOI18N
        jButtonOK.setText(resourceMap.getString("jButtonOK.text")); // NOI18N
        jButtonOK.setName("jButtonOK"); // NOI18N
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonOK);
        jButtonOK.setBounds(650, 410, 60, 31);

        jButtonAnnuler.setFont(resourceMap.getFont("jButtonAnnuler.font")); // NOI18N
        jButtonAnnuler.setText(resourceMap.getString("jButtonAnnuler.text")); // NOI18N
        jButtonAnnuler.setName("jButtonAnnuler"); // NOI18N
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonAnnuler);
        jButtonAnnuler.setBounds(450, 410, 110, 31);

        jLabelFond.setText(resourceMap.getString("jLabelFond.text")); // NOI18N
        jLabelFond.setName("jLabelFond"); // NOI18N
        jPanel1.add(jLabelFond);
        jLabelFond.setBounds(0, 0, 1150, 700);

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(projet_consultation.Projet_ConsultationApp.class).getContext().getActionMap(JFrame_connexion.class, this);
        jMenuItem1.setAction(actionMap.get("QuitterApp")); // NOI18N
        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N

        jMenuItem2.setAction(actionMap.get("ShowAboutBox")); // NOI18N
        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1142, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 696, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        VerifierConnexion();
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void VerifierConnexion()
    {
        try
        {
            String mac="90FBA68607D9";
            Connexion_BDDGenerale cn = Connexion_BDDGenerale.getInstance();
            String login="";
            String passwd="";
            login = jTextFieldLogin.getText().trim();
            passwd = new String(jPasswordFieldPassword.getPassword()).trim();
            passwd = StringEncrypter.encrypt(passwd);
            System.out.println("Password encrypter:" + passwd);
            String requete = "select * from utilisateurs where login='" + login + "'  and pwd='" + passwd + "'";
            ResultSet result = cn.getResultset(requete);
            boolean connect=false;
            boolean Blogin=false;
            Blogin=result.next();
            if (Blogin)
            {
                try
                {
                    email = result.getString("email");
                } catch (Exception ex)
                {}
                connect=true;
            }
            else
            {
                requete = "select * from adminbi4t where login='" + login + "'  and pwd='" + passwd + "'";
                result = cn.getResultset(requete);
                if(result.next())
                {
                    connect=true;
                }
            }
            if(connect)
            { 
                boolean b=false;
                List<String> list = new ArrayList<String>();
                try
                {
                    list = this.getMacAdresses();
                }
                catch (SocketException ex)
                {
                    Logger.getLogger(JFrame_connexion.class.getName()).log(Level.SEVERE, null, ex);
                }
                int n=0;
                n=list.size();
                for (int i = 0; i <n && b==false; i++)
                {
                    if(mac.equalsIgnoreCase(list.get(i)))
                        b=true;
                }
                if (b)
                {
                    this.dispose();
                    Interface_Principale frm = new Interface_Principale();
                    frm.setVisible(true);
                } else
                {
                    JOptionPane.showMessageDialog(this, "Veuillez Verifier l'authenticité du logiciel...", "Erreur", JOptionPane.ERROR_MESSAGE);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Login et/ou mot de passe incorrect ", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (SQLException ex)
        {
            JOptionPane.showMessageDialog(this, "Erreur lors de la vérification dans la base de données", "Erreur", JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(JFrame_connexion.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, "Erreur lors de la connexion à la base de données/ Verifiez que vous pouvez acceder à la base de données", "Erreur", JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(JFrame_connexion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private List<String> getMacAdresses() throws SocketException
    {
        // On crée la liste qui contiendra le résultat :
        ArrayList<String> list = new ArrayList<String>();

        // On récupère les interfaces réseaux du systèmes :
        Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();
        while (networks.hasMoreElements())
        {
            // Pour chaque interface réseau :
            //NetworkInterface network = NetworkInterface.getByIndex(3);
            NetworkInterface network = networks.nextElement();
            // On récupère la Mac adresse :
            byte[] mac = network.getHardwareAddress();
            if (mac != null)
            {
                // Et si elle existe on la formate afin de la rendre plus lisible :
                StringBuilder sb = new StringBuilder();
                for (byte b : mac)
                {
                    sb.append(String.format("%02X", b));
                }
                // Avant de la rajouter dans la liste :
                list.add(sb.toString());
            }
        }
        // On 'optimize' la taille de la liste avant de renvoyer le résultat :
        list.trimToSize();
        return list;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelFond;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordFieldPassword;
    private javax.swing.JTextField jTextFieldLogin;
    // End of variables declaration//GEN-END:variables

    @Action
    public void QuitterApp()
    {
        int valQuitter=JOptionPane.showConfirmDialog(this,"Voulez-vous quitter ?", "",JOptionPane.YES_NO_OPTION);
        if(valQuitter==0)
        {
            this.dispose();
            System.exit(0);
        }
    }
}
